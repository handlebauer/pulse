# @pulse/ops Environment Configuration Example
# Copy this file to .env and modify as needed

######################
# General Settings   #
######################

# Log level controls the verbosity of logs
# 0=DEBUG (most verbose, includes all messages)
# 1=INFO (standard operational messages)
# 2=WARN (only warnings and errors)
# 3=ERROR (only error messages)
LOG_LEVEL=1

# Whether to use a sample of stations for testing
# true = process only a small subset of stations (typically 10-20)
# false = process all stations
#
# This is extremely useful for:
# - Development and testing: Quickly test changes without processing all stations
# - Debugging: Work with a smaller dataset when troubleshooting
# - Saving API costs: Reduce calls to paid APIs like Google Gemini
# - Reducing network load: Make fewer network requests when validating streams
#
# In production environments, this should always be set to false
SAMPLE=false

#######################
# Database Connection #
#######################

# Supabase connection details
# The URL of your Supabase project (found in the Supabase dashboard)
SUPABASE_URL=https://your-project.supabase.co

# Service role key with admin privileges (found in API settings in Supabase dashboard)
# CAUTION: This key has full access to your database, keep it secure
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

######################
# 1. Fetch Stations  #
######################

# Radio Browser API base URL
# The API endpoint for fetching radio station data
# If not specified, the client will automatically select a random server
# See: https://api.radio-browser.info/ for available servers
RADIO_BROWSER_API_URL=https://de1.api.radio-browser.info/json

# Minimum votes for stations to be included
# Only stations with at least this many votes will be fetched
# Higher values mean fewer but more popular stations
RADIO_BROWSER_MIN_VOTES=3000

# Whether to include only stations marked as online in Radio Browser
# true = only fetch stations marked as online (recommended)
# false = fetch all stations regardless of reported status
RADIO_BROWSER_ONLINE_ONLY=true

# Whether to include only stations with English language tag
# true = only fetch stations tagged as English
# false = fetch stations in all languages
RADIO_BROWSER_ENGLISH_ONLY=true

# Comma-separated list of country codes to include
# Only stations from these countries will be fetched
# Use ISO 3166-1 alpha-2 country codes (e.g., US, GB, CA)
# Leave empty to include all countries
RADIO_BROWSER_COUNTRIES=US,GB,CA,AU

########################
# 2. Classify Stations #
########################

# Google API key for Gemini AI (used for station classification)
# Required for the classification step to categorize stations
# Obtain from Google AI Studio or Google Cloud Console
CLASSIFY_GOOGLE_API_KEY=your-google-api-key

#######################
# 3. Validate Streams #
#######################

# Interval for validating streams (in minutes)
# How frequently the scheduled validation service will check if streams are online
# Lower values provide more up-to-date information but increase server load
# Recommended: 5-15 minutes for production, 1-5 minutes for testing
VALIDATE_STREAMS_INTERVAL=5

##########################
# 4. Geolocate Stations  #
##########################

# Mapbox API key for geocoding
# Required for the geolocate step to convert location strings to coordinates
# Obtain from Mapbox dashboard
MAPBOX_API_KEY=your-mapbox-api-key

##########################
# 5. Stream Orchestrator #
##########################

# Base directory for storing audio segments
# Path where recorded audio segments will be stored
# This directory will be created if it doesn't exist
BASE_SEGMENT_DIR=data/segments

# Default segment length in seconds
# How long each audio segment should be when recording streams
# Shorter segments mean more frequent updates but more files
DEFAULT_SEGMENT_LENGTH=30

# Number of segments to keep per station
# Controls how many recent segments to retain before deleting older ones
# Higher values use more disk space but provide longer history
DEFAULT_KEEP_SEGMENTS=5 

# Google API key for Gemini AI (used for transcription)
# Required for the transcription step to transcribe audio segments
# Obtain from Google AI Studio or Google Cloud Console
TRANSCRIPTION_GOOGLE_API_KEY=your-google-api-key

# The model to use for transcription
TRANSCRIPTION_GOOGLE_LLM_MODEL=gemini-2.0-flash